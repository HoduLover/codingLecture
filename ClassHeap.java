package codingLecture;

public class ClassHeap {

	public static void main(String[] args) {
		

	}

}
//*Heap에 대해서
//최솟값과 최댓값을 빠르게 구할 수 있도록 만든 완전 이진 트리다.
//Min heap root가 최소, Max heap은 root가 최대
//O(long n)의 시간이 걸린다. 


//*Big-O란?
//빅오는 알고리즘의 성능을 수학적으로 표현한 표기법이다. 
//시간, 공간 복잡도를 표현할 수 있다. 
//런타임 시간이 아니라 데이터와 사용자의 증가율에 따른
//알고리즘의 성능을 예측하는 게 목표다. 
//1.O(1)
//입력 데이터와 상관없이 늘 일정한 알고리즘을 말한다.
//2.O(n)
//입력 데이터와 비례해서 처리시간이 걸리는 것
//보통 인자로 받은 값으로 포문을 돌릴 때 걸리는 시간
// 데이터가 증가함에 따라 시간도 비례로 증가한다. 
//3.O(n제곱)
//보통 이중포문일 때이다. n이 늘어질 수록 처리 시간 부담이 커진다.
//테이터가 늘어날 수록 시간이 수직 상승한다. 
//4.O(nm)
//이중포문이긴 하지만, 두 개의 값이 다를 경우에는
//n제곱까진 되지 않을 수도 있다. 
//5.O(n세제곱)
//면적같은 것이다. n제곱보다 훨씬 급격하게 처리시간 늘어난다. 
//6.O(2의 n승)
//피보나치같은 것이다. 피보나치를 재귀로 불렀을 때 함수일 때 
//시간복잡도를 갖는다. 
//7.O(log n)
//이진 검색이 대표적이다. 데이터를 찾을 때마다 앞으로 검색할
//데이터의 양이 절반씩 줄어드는 것을 의미
//O(n)보다 훨씬 적게 시간이 든다. 
//8.O(sqrt(n)) 제곱근 n

//빅오에서 상수는 버린다. 2n제곱같은 건 없다는 뜻.

